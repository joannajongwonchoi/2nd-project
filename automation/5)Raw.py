# -*- coding: utf-8 -*-
"""원자재 최종 검수본.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ClUkIo08-Neufee8F7ov5iWjyijIoRii
"""


import pandas as pd
import pymysql
from sqlalchemy import create_engine
import numpy as np
from datetime import datetime, timedelta

conn = pymysql.connect(host='34.64.224.44', user='root', password='A412GBVSDsawe%$we', db='smart_factory')
sql_state='SELECT * FROM `production_planning`'
planning=pd.read_sql_query(sql_state, conn)

sql_state='SELECT * FROM `recipe`'
recipe=pd.read_sql_query(sql_state, conn)

# 일별 소모량
now = datetime.now().strftime('%R')
print('Daily Raw Update Start --',now)

planning=planning.groupby(['SOLDDATE','PRODNAME']).sum().reset_index()
daily_raw=pd.merge(planning,recipe,how='left',on=['PRODNAME'])

for raw in ['SR11002', 'SR35218','SR35904', 'SR15500', 'SR13801', 'SR16600', 'SR35224', 'SR35903',
       'SR68222', 'SR35225', 'SR35228', 'SR38117', 'SR16002', 'SR35758',
       'SR35210', 'SR34364', 'SR35500', 'SR35556', 'SR18520', 'SR35217',
       'SR35905', 'SR35755', 'SR34307', 'SR35760', 'SR35761', 'SR35765',
       'SR34311', 'SR35211', 'TSN4012039104', 'SR35221', 'SR16003',
       'PEMA023017400', 'TSN4012057700', 'SR47093', 'SSA043031400']:
  daily_raw[raw] = daily_raw[raw]*daily_raw['QUANT']

daily_raw=daily_raw.drop(['PRODNAME','QUANT','CUSTID'],axis=1)
daily_raw=daily_raw.groupby('SOLDDATE').sum()
daily_raw=daily_raw.reset_index()

db_connection_str = 'mysql+pymysql://root:A412GBVSDsawe%$we@34.64.224.44:3306/smart_factory'
db_connection = create_engine(db_connection_str)
conn = db_connection.connect()

daily_raw.to_sql(name = 'daily_raw',con = db_connection, index = False, if_exists = 'replace')

now = datetime.now().strftime('%R')
print('Daily Raw Update Start --',now)


# 보정 없는 발주량

now = datetime.now().strftime('%R')
print('Week Order Amount Update Start --',now)

conn = pymysql.connect(host='34.64.224.44', user='root', password='A412GBVSDsawe%$we', db='smart_factory')

sql_state='SELECT * FROM `daily_raw`'
daily_raw=pd.read_sql_query(sql_state, conn)

daily_raw=daily_raw.set_index('SOLDDATE')
daily_raw=daily_raw.resample('W-SUN').sum()
daily_raw=daily_raw.reset_index()
daily_raw['SOLDDATE'] = daily_raw['SOLDDATE'] - timedelta(days=13)

db_connection_str = 'mysql+pymysql://root:A412GBVSDsawe%$we@34.64.224.44:3306/smart_factory'
db_connection = create_engine(db_connection_str)
conn = db_connection.connect()

daily_raw.to_sql(name = 'temp_week_order_amount',con = db_connection, index = False, if_exists = 'replace')

now = datetime.now().strftime('%R')
print('Week Order Amount Update End --',now)

#일별 원자재 재고량

now = datetime.now().strftime('%R')
print('Stock Raw Update Start --',now)

conn = pymysql.connect(host='34.64.224.44', user='root', password='A412GBVSDsawe%$we', db='smart_factory')
sql_state='SELECT * FROM `daily_raw`'
daily_raw=pd.read_sql_query(sql_state, conn)

sql_state='SELECT * FROM `temp_week_order_amount`'
week_order_amount=pd.read_sql_query(sql_state, conn)

sql_state='SELECT * FROM `safety_stock`'
safety=pd.read_sql_query(sql_state, conn)

sql_state='SELECT * FROM `current_stock_raw`'
current_stock_raw=pd.read_sql_query(sql_state, conn)

empty_day=pd.date_range(daily_raw['SOLDDATE'][0],daily_raw['SOLDDATE'][len(daily_raw)-1],freq='1d')
raw_state = pd.DataFrame(index=list(empty_day),columns=['SR11002', 'SR35218', 'SR35904', 'SR15500', 'SR13801',
       'SR16600', 'SR35224', 'SR35903', 'SR68222', 'SR35225', 'SR35228',
       'SR38117', 'SR16002', 'SR35758', 'SR35210', 'SR34364', 'SR35500',
       'SR35556', 'SR18520', 'SR35217', 'SR35905', 'SR35755', 'SR34307',
       'SR35760', 'SR35761', 'SR35765', 'SR34311', 'SR35211', 'TSN4012039104',
       'SR35221', 'SR16003', 'PEMA023017400', 'TSN4012057700', 'SR47093',
       'SSA043031400'])

raw_state.iloc[0,:]=current_stock_raw['raw_stock']

empty_day_df=pd.DataFrame(empty_day)
empty_day_df.rename(columns={0:'SOLDDATE'},inplace=True)

daily_raw = pd.merge(daily_raw,empty_day_df,how='right',on='SOLDDATE')
daily_raw.fillna(0,inplace=True)

raw_state=raw_state.reset_index()
raw_state.rename(columns={'index':'SOLDDATE'},inplace=True)

week_order_amount['SOLDDATE'] = week_order_amount['SOLDDATE'] + timedelta(days=7)

add_raw = []

for raw in safety['raw_material'].unique():
  safe_amount=safety.loc[safety['raw_material']==raw]['safety_stock'].values
  current_amount=raw_state[raw][0]
  extra = int(safe_amount - current_amount)
  add_raw.append(extra)

for i in range(0,35):
  week_order_amount.iloc[2,i+1] = week_order_amount.iloc[2,i+1] + add_raw[i] + week_order_amount.iloc[0,i+1]

week_order_amount = week_order_amount[week_order_amount['SOLDDATE']>empty_day[0]]

temp = week_order_amount.copy()

temp['SOLDDATE'] = temp['SOLDDATE'] - timedelta(days=7)

temp = temp[temp['SOLDDATE']>empty_day[0]]

# 주간 발주량 재보정

temp

db_connection_str = 'mysql+pymysql://root:A412GBVSDsawe%$we@34.64.224.44:3306/smart_factory'
db_connection = create_engine(db_connection_str)
conn = db_connection.connect()

temp.to_sql(name = 'week_order_amount',con = db_connection, index = False, if_exists = 'replace')

week_order_amount = pd.merge(week_order_amount,empty_day_df,how='right',on='SOLDDATE')
week_order_amount.fillna(0,inplace=True)

for day in empty_day:

  for raw in raw_state.columns[1:]:
    daily_raw_=daily_raw.loc[daily_raw['SOLDDATE']==day][raw]
    raw_state.loc[raw_state['SOLDDATE']==day,raw] -= daily_raw_

  if day in list(week_order_amount['SOLDDATE']):
    for raw in raw_state.columns[1:]:
      week_order_amount_=week_order_amount.loc[week_order_amount['SOLDDATE']==day,raw]
      raw_state.loc[raw_state['SOLDDATE']==day,raw] += week_order_amount_ 

  raw_state.fillna(method='ffill', limit=1,inplace=True)

# import matplotlib.pyplot as plt
# raw_state.set_index('SOLDDATE')['SR11002'].plot()
# plt.hlines(2634834,'2022-04-01','2022-06-29')

db_connection_str = 'mysql+pymysql://root:A412GBVSDsawe%$we@34.64.224.44:3306/smart_factory'
db_connection = create_engine(db_connection_str)
conn = db_connection.connect()

raw_state.to_sql(name = 'stock_raw',con = db_connection, index = False, if_exists = 'replace')

now = datetime.now().strftime('%R')
print('Stock Raw Update End --',now)